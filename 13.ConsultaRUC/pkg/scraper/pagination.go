package scraper

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/go-rod/rod"
)

func (s *ScraperExtendido) DetectarPaginacion(page *rod.Page) bool {
	// DETECTORES ESPEC√çFICOS PARA SUNAT - MEJORADOS

	// 1. Buscar el patr√≥n m√°s espec√≠fico de SUNAT: "P√°ginas:" seguido de enlaces
	paginasElement, err := page.Timeout(5 * time.Second).ElementX("//td[contains(text(), 'P√°ginas:')]")
	if err == nil && paginasElement != nil {
		visible, err := paginasElement.Visible()
		if err == nil && visible {
			log.Printf("‚úÖ Detectada paginaci√≥n SUNAT: elemento 'P√°ginas:' encontrado y visible")
			return true
		}
	}

	// 2. Buscar enlaces con javascript:paginacion() - M√ÅS ESPEC√çFICO
	paginacionLinks, err := page.Timeout(5 * time.Second).ElementsX("//a[contains(@href, 'javascript:paginacion')]")
	if err == nil && len(paginacionLinks) > 0 {
		// Verificar que al menos uno sea visible
		for _, link := range paginacionLinks {
			if visible, err := link.Visible(); err == nil && visible {
				log.Printf("‚úÖ Detectada paginaci√≥n SUNAT: %d enlaces con javascript:paginacion() visibles", len(paginacionLinks))
				return true
			}
		}
	}

	// 3. Buscar patr√≥n espec√≠fico de SUNAT: "1 a X de Y" - CORREGIDO
	patronResultados, err := page.Timeout(3 * time.Second).ElementX("//td[contains(text(), ' a ') and contains(text(), ' de ')]")
	if err == nil && patronResultados != nil {
		visible, err := patronResultados.Visible()
		if err == nil && visible {
			texto, _ := patronResultados.Text()
			// Verificar que sigue el patr√≥n "X a Y de Z"
			if matched, _ := regexp.MatchString(`\d+\s+a\s+\d+\s+de\s+\d+`, texto); matched {
				// NUEVA VALIDACI√ìN: Solo considerar paginaci√≥n si hay m√°s de 1 p√°gina
				// Extraer el total de resultados
				re := regexp.MustCompile(`(\d+)\s+a\s+(\d+)\s+de\s+(\d+)`)
				matches := re.FindStringSubmatch(texto)
				if len(matches) == 4 {
					totalResultados, _ := strconv.Atoi(matches[3])
					resultadosPorPagina, _ := strconv.Atoi(matches[2])

					// Solo hay paginaci√≥n si el total es mayor que los resultados mostrados
					if totalResultados > resultadosPorPagina {
						log.Printf("‚úÖ Detectada paginaci√≥n SUNAT: patr√≥n de resultados '%s' (%d total, %d por p√°gina)", texto, totalResultados, resultadosPorPagina)
						return true
					} else {
						log.Printf("üìÑ Sin paginaci√≥n SUNAT: solo una p√°gina '%s'", texto)
					}
				}
			}
		}
	}

	// 4. Buscar combinaci√≥n de "P√°ginas:" + enlaces numerados + "Siguiente"
	siguienteLink, err1 := page.Timeout(3 * time.Second).ElementX("//a[contains(text(), 'Siguiente')]")
	numerosLinks, err2 := page.Timeout(3 * time.Second).ElementsX("//a[contains(@href, 'javascript:paginacion')]")

	if err1 == nil && err2 == nil && siguienteLink != nil && len(numerosLinks) > 0 {
		visible1, _ := siguienteLink.Visible()
		if visible1 {
			log.Printf("‚úÖ Detectada paginaci√≥n SUNAT: 'Siguiente' + %d enlaces numerados", len(numerosLinks))
			return true
		}
	}

	// 5. NUEVO: Buscar tabla con estructura espec√≠fica de paginaci√≥n SUNAT
	tablaPaginacion, err := page.Timeout(3 * time.Second).ElementX("//table[.//td[contains(text(), 'P√°ginas:')]]")
	if err == nil && tablaPaginacion != nil {
		visible, err := tablaPaginacion.Visible()
		if err == nil && visible {
			log.Printf("‚úÖ Detectada paginaci√≥n SUNAT: tabla de paginaci√≥n encontrada")
			return true
		}
	}

	// Selectores adicionales para otros sistemas
	selectoresPaginacionEspecificos := []string{
		".pagination",
		".pager",
		".page-navigation",
		".gridview-pager",
		".dataTables_paginate",
		"ul.pagination",
		"div.pagination",
		"[role='navigation'][aria-label*='pag']",
		"[class='paging']",
		"[id*='DataPager']",
		"[id*='GridPager']",
		"//a[contains(@href, 'page=') or contains(@href, 'pagina=') or contains(@href, 'offset=')]",
	}

	// Verificar selectores espec√≠ficos con timeout m√°s corto
	for _, selector := range selectoresPaginacionEspecificos {
		var element *rod.Element
		var err error

		if strings.HasPrefix(selector, "//") {
			element, err = page.Timeout(2 * time.Second).ElementX(selector)
		} else {
			element, err = page.Timeout(2 * time.Second).Element(selector)
		}

		if err == nil && element != nil {
			visible, err := element.Visible()
			if err == nil && visible {
				log.Printf("‚úÖ Detectada paginaci√≥n gen√©rica: selector %s", selector)
				return true
			}
		}
	}

	// B√∫squeda por texto con patrones MUY espec√≠ficos
	pageText, err := page.MustElement("body").Text()
	if err == nil {
		// PATRONES ESPEC√çFICOS DE SUNAT - CON VALIDACI√ìN MEJORADA
		if strings.Contains(pageText, "P√°ginas:") {
			// Verificar tambi√©n que no sea "1 a 1 de 1"
			re := regexp.MustCompile(`(\d+)\s+a\s+(\d+)\s+de\s+(\d+)`)
			matches := re.FindStringSubmatch(pageText)
			if len(matches) == 4 {
				totalResultados, _ := strconv.Atoi(matches[3])
				resultadosPorPagina, _ := strconv.Atoi(matches[2])
				if totalResultados > resultadosPorPagina {
					log.Printf("‚úÖ Detectada paginaci√≥n SUNAT: texto 'P√°ginas:' encontrado en body con m√∫ltiples p√°ginas")
					return true
				} else {
					log.Printf("üìÑ Sin paginaci√≥n SUNAT: 'P√°ginas:' encontrado pero solo una p√°gina (%d de %d)", resultadosPorPagina, totalResultados)
				}
			} else {
				// Si no puede extraer n√∫meros, asumir que hay paginaci√≥n (caso edge)
				log.Printf("‚úÖ Detectada paginaci√≥n SUNAT: texto 'P√°ginas:' encontrado en body")
				return true
			}
		}

		// Patrones muy espec√≠ficos que indican paginaci√≥n real - SIN EL PATR√ìN PROBLEM√ÅTICO
		patronesPaginacionEspecificos := []string{
			`P√°gina\s+\d+\s+de\s+\d+`,
			`Mostrando\s+\d+\s*[-‚Äì]\s*\d+\s+de\s+\d+`,
			`Registros\s+\d+\s+al\s+\d+\s+de\s+\d+`,
			`\d+\s+to\s+\d+\s+of\s+\d+`,
			`P√°gina\s+(anterior|siguiente)`,
			`(Primera|√öltima)\s+p√°gina`,
			`Ir\s+a\s+p√°gina`,
		}

		for _, patron := range patronesPaginacionEspecificos {
			matched, err := regexp.MatchString("(?i)"+patron, pageText)
			if err == nil && matched {
				// VALIDACI√ìN ADICIONAL: Para patrones que pueden incluir "1 a 1 de 1"
				if strings.Contains(patron, `\d+\s*[-‚Äì]\s*\d+\s+de\s+\d+`) || strings.Contains(patron, `\d+\s+al\s+\d+\s+de\s+\d+`) || strings.Contains(patron, `\d+\s+to\s+\d+\s+of\s+\d+`) {
					// Extraer n√∫meros para validar que no sea una sola p√°gina
					re := regexp.MustCompile(`(\d+).*?(\d+).*?(\d+)`)
					matches := re.FindStringSubmatch(pageText)
					if len(matches) >= 4 {
						inicio, _ := strconv.Atoi(matches[1])
						fin, _ := strconv.Atoi(matches[2])
						total, _ := strconv.Atoi(matches[3])
						if total > fin || (fin-inicio) > 0 {
							log.Printf("‚úÖ Detectada paginaci√≥n por patr√≥n de texto validado: %s", patron)
							return true
						} else {
							log.Printf("üìÑ Patr√≥n encontrado pero es una sola p√°gina: %s", patron)
							continue
						}
					}
				}
				log.Printf("‚úÖ Detectada paginaci√≥n por patr√≥n de texto: %s", patron)
				return true
			}
		}
	}

	// Verificaci√≥n adicional: buscar m√∫ltiples enlaces numerados (t√≠pico de paginaci√≥n)
	numerosLinks, err = page.Timeout(3 * time.Second).ElementsX("//a[text() >= '1' and text() <= '99'] | //button[text() >= '1' and text() <= '99']")
	if err == nil && len(numerosLinks) >= 3 {
		// Verificar que al menos algunos sean visibles
		visibleCount := 0
		for _, link := range numerosLinks {
			if visible, _ := link.Visible(); visible {
				visibleCount++
			}
		}
		if visibleCount >= 3 {
			log.Printf("‚úÖ Detectada paginaci√≥n: %d enlaces numerados visibles", visibleCount)
			return true
		}
	}

	// Buscar botones "Siguiente" y "Anterior" juntos
	hasSiguiente := false
	hasAnterior := false

	siguiente, err1 := page.Timeout(2 * time.Second).ElementX("//button[contains(text(), 'Siguiente') or contains(text(), 'Next')] | //a[contains(text(), 'Siguiente') or contains(text(), 'Next')]")
	anterior, err2 := page.Timeout(2 * time.Second).ElementX("//button[contains(text(), 'Anterior') or contains(text(), 'Previous') or contains(text(), 'Prev')] | //a[contains(text(), 'Anterior') or contains(text(), 'Previous') or contains(text(), 'Prev')]")

	if err1 == nil && siguiente != nil {
		if visible, _ := siguiente.Visible(); visible {
			hasSiguiente = true
		}
	}

	if err2 == nil && anterior != nil {
		if visible, _ := anterior.Visible(); visible {
			hasAnterior = true
		}
	}

	// Si tiene ambos botones, muy probablemente sea paginaci√≥n
	if hasSiguiente && hasAnterior {
		log.Printf("‚úÖ Detectada paginaci√≥n: botones Siguiente y Anterior presentes")
		return true
	}

	// Si solo tiene "Siguiente", tambi√©n puede ser paginaci√≥n (primera p√°gina)
	if hasSiguiente {
		// Buscar indicios adicionales de que es primera p√°gina - CON VALIDACI√ìN MEJORADA
		pageText, err := page.MustElement("body").Text()
		if err == nil {
			if strings.Contains(pageText, "P√°ginas:") {
				// Validar que no sea "1 a 1 de 1"
				re := regexp.MustCompile(`(\d+)\s+a\s+(\d+)\s+de\s+(\d+)`)
				matches := re.FindStringSubmatch(pageText)
				if len(matches) == 4 {
					totalResultados, _ := strconv.Atoi(matches[3])
					resultadosPorPagina, _ := strconv.Atoi(matches[2])
					if totalResultados > resultadosPorPagina {
						log.Printf("‚úÖ Detectada paginaci√≥n: bot√≥n Siguiente + indicadores de primera p√°gina v√°lidos")
						return true
					}
				} else {
					log.Printf("‚úÖ Detectada paginaci√≥n: bot√≥n Siguiente + indicadores de primera p√°gina")
					return true
				}
			}
		}
	}

	log.Printf("‚ùå No se detect√≥ paginaci√≥n")
	return false
}

// Nueva funci√≥n para debugging espec√≠fico y detallado
func (s *ScraperExtendido) DebugPaginacionDetallado(page *rod.Page) {
	log.Printf("üîç === DEBUG DETECCI√ìN DE PAGINACI√ìN ===")

	// 1. Verificar elemento "P√°ginas:"
	paginasElement, err1 := page.ElementX("//td[contains(text(), 'P√°ginas:')]")
	log.Printf("1. Elemento 'P√°ginas:': existe=%v, error=%v", paginasElement != nil, err1)
	if paginasElement != nil {
		visible, _ := paginasElement.Visible()
		text, _ := paginasElement.Text()
		log.Printf("   - Visible: %v, Texto: '%s'", visible, text)
	}

	// 2. Verificar enlaces javascript:paginacion
	paginacionLinks, err2 := page.ElementsX("//a[contains(@href, 'javascript:paginacion')]")
	log.Printf("2. Links javascript:paginacion: cantidad=%d, error=%v", len(paginacionLinks), err2)
	for i, link := range paginacionLinks {
		if i < 5 { // Solo mostrar los primeros 5
			href, _ := link.Attribute("href")
			text, _ := link.Text()
			visible, _ := link.Visible()
			log.Printf("   - Link %d: href='%s', texto='%s', visible=%v", i+1, *href, text, visible)
		}
	}

	// 3. Verificar patr√≥n "X a Y de Z"
	patronResultados, err3 := page.ElementX("//td[contains(text(), ' a ') and contains(text(), ' de ')]")
	log.Printf("3. Patr√≥n resultados: existe=%v, error=%v", patronResultados != nil, err3)
	if patronResultados != nil {
		text, _ := patronResultados.Text()
		visible, _ := patronResultados.Visible()
		log.Printf("   - Texto: '%s', Visible: %v", text, visible)
	}

	// 4. Verificar bot√≥n "Siguiente"
	siguienteLink, err4 := page.ElementX("//a[contains(text(), 'Siguiente')]")
	log.Printf("4. Bot√≥n Siguiente: existe=%v, error=%v", siguienteLink != nil, err4)
	if siguienteLink != nil {
		href, _ := siguienteLink.Attribute("href")
		visible, _ := siguienteLink.Visible()
		log.Printf("   - Href: '%s', Visible: %v", *href, visible)
	}

	// 5. Verificar HTML completo de paginaci√≥n
	tablaPaginacion, err5 := page.ElementX("//table[.//td[contains(text(), 'P√°ginas:')]]")
	log.Printf("5. Tabla paginaci√≥n: existe=%v, error=%v", tablaPaginacion != nil, err5)
	if tablaPaginacion != nil {
		html, _ := tablaPaginacion.HTML()
		visible, _ := tablaPaginacion.Visible()
		log.Printf("   - Visible: %v", visible)
		log.Printf("   - HTML: %s", html[:min(200, len(html))])
	}

	// 6. B√∫squeda en texto de la p√°gina
	pageText, err := page.MustElement("body").Text()
	if err == nil {
		hasPages := strings.Contains(pageText, "P√°ginas:")
		log.Printf("6. Texto p√°gina contiene 'P√°ginas:': %v", hasPages)

		// Buscar patr√≥n espec√≠fico
		patron := regexp.MustCompile(`\d+\s+a\s+\d+\s+de\s+\d+`)
		matches := patron.FindAllString(pageText, -1)
		log.Printf("   - Patrones 'X a Y de Z' encontrados: %v", matches)
	}

	log.Printf("üîç === FIN DEBUG DETECCI√ìN ===")
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// DetectarPaginacionConContexto detecta paginaci√≥n y proporciona informaci√≥n adicional
func (s *ScraperExtendido) DetectarPaginacionConContexto(page *rod.Page, seccion string) (bool, string) {
	tienePaginacion := s.DetectarPaginacion(page)

	if !tienePaginacion {
		return false, "No se detect√≥ paginaci√≥n"
	}

	// Intentar obtener informaci√≥n espec√≠fica sobre la paginaci√≥n
	contexto := ""

	// INFORMACI√ìN ESPEC√çFICA DE SUNAT
	paginacionLinks, err := page.ElementsX("//a[contains(@href, 'javascript:paginacion')]")
	if err == nil && len(paginacionLinks) > 0 {
		// Obtener el n√∫mero de la √∫ltima p√°gina
		ultimaPagina := 1
		for _, link := range paginacionLinks {
			texto, err := link.Text()
			if err == nil {
				// Extraer n√∫mero de la p√°gina (formato "2 | " o "3 | ")
				numeroStr := strings.TrimSpace(strings.Replace(texto, "|", "", -1))
				if numero, err := strconv.Atoi(numeroStr); err == nil && numero > ultimaPagina {
					ultimaPagina = numero
				}
			}
		}
		contexto = fmt.Sprintf("SUNAT - %d p√°ginas disponibles (p√°gina actual: 1)", ultimaPagina+1)
	}

	// Si no es SUNAT, usar patrones generales
	if contexto == "" {
		pageText, err := page.MustElement("body").Text()
		if err == nil {
			// Verificar si contiene "P√°ginas:"
			if strings.Contains(pageText, "P√°ginas:") {
				contexto = "SUNAT - Paginaci√≥n detectada"
			} else {
				// Patrones para extraer informaci√≥n espec√≠fica de paginaci√≥n
				patrones := map[string]*regexp.Regexp{
					"pagina_de":   regexp.MustCompile(`(?i)P√°gina\s+(\d+)\s+de\s+(\d+)`),
					"mostrando":   regexp.MustCompile(`(?i)Mostrando\s+(\d+)\s*[-‚Äì]\s*(\d+)\s+de\s+(\d+)`),
					"registros":   regexp.MustCompile(`(?i)Registros\s+(\d+)\s+al\s+(\d+)\s+de\s+(\d+)`),
					"total_items": regexp.MustCompile(`(?i)(\d+)\s+to\s+(\d+)\s+of\s+(\d+)`),
				}

				for nombre, patron := range patrones {
					if matches := patron.FindStringSubmatch(pageText); len(matches) > 1 {
						switch nombre {
						case "pagina_de":
							contexto = fmt.Sprintf("P√°gina %s de %s", matches[1], matches[2])
						case "mostrando", "registros":
							if len(matches) > 3 {
								contexto = fmt.Sprintf("Mostrando %s-%s de %s registros", matches[1], matches[2], matches[3])
							}
						case "total_items":
							if len(matches) > 3 {
								contexto = fmt.Sprintf("Items %s-%s de %s", matches[1], matches[2], matches[3])
							}
						}
						break
					}
				}
			}
		}
	}

	// Contar enlaces numerados para dar m√°s contexto
	if contexto == "" {
		numerosLinks, err := page.ElementsX("//a[text() >= '1' and text() <= '99'] | //button[text() >= '1' and text() <= '99']")
		if err == nil && len(numerosLinks) > 0 {
			contexto = fmt.Sprintf("Paginaci√≥n con %d p√°ginas numeradas", len(numerosLinks))
		} else {
			contexto = "Controles de paginaci√≥n detectados"
		}
	}

	return true, contexto
}

// ValidarPaginacionEnSeccion - funci√≥n auxiliar para validar en secciones espec√≠ficas
func (s *ScraperExtendido) ValidarPaginacionEnSeccion(page *rod.Page, seccion string) (bool, string) {
	// Log para debugging
	log.Printf("üîç Verificando paginaci√≥n en secci√≥n: %s", seccion)

	// Obtener el HTML de la p√°gina para an√°lisis manual si es necesario
	pageHTML, err := page.HTML()
	if err == nil {
		// Log del tama√±o del HTML para verificar que tenemos contenido
		log.Printf("üìÑ Tama√±o del HTML: %d caracteres", len(pageHTML))
	}

	return s.DetectarPaginacionConContexto(page, seccion)
}

// DebugPaginacionSUNAT - funci√≥n para debugging espec√≠fico
func (s *ScraperExtendido) DebugPaginacionSUNAT(page *rod.Page) {
	// Buscar elementos espec√≠ficos
	paginasElement, err1 := page.ElementX("//td[contains(text(), 'P√°ginas:')]")
	paginacionLinks, err2 := page.ElementsX("//a[contains(@href, 'javascript:paginacion')]")
	siguienteLink, err3 := page.ElementX("//a[contains(text(), 'Siguiente')]")

	log.Printf("üîç DEBUG PAGINACI√ìN SUNAT:")
	log.Printf("   - Elemento 'P√°ginas:': %v (error: %v)", paginasElement != nil, err1)
	log.Printf("   - Links javascript:paginacion: %d (error: %v)", len(paginacionLinks), err2)
	log.Printf("   - Link 'Siguiente': %v (error: %v)", siguienteLink != nil, err3)

	// Mostrar HTML de la tabla de paginaci√≥n si existe
	tablaElement, err := page.ElementX("//table[.//td[contains(text(), 'P√°ginas:')]]")
	if err == nil && tablaElement != nil {
		html, _ := tablaElement.HTML()
		log.Printf("   - HTML tabla paginaci√≥n: %s", html)
	}
}
